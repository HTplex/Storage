/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2013 by the members listed in the COPYING,     *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package playground.jjoubert.projects.locationAllocation;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;

import org.apache.log4j.Logger;
import org.matsim.core.utils.io.IOUtils;

import playground.southafrica.utilities.Header;

public class CountSiteFrequency {
	private final static Logger LOG = Logger.getLogger(CountSiteFrequency.class);
	private Map<String, Map<String, Integer>> map;

	/**
	 * Implements a class to check the multi-run output generated by 
	 * {@link SAString}, and find the frequency of occurrences of a site in the
	 * incumbent solutions.
	 * @param args
	 */
	public static void main(String[] args) {
		Header.printHeader(CountSiteFrequency.class.toString(), args);
		
		String inputFile = args[0];
		String outputFile = args[1];
		
		CountSiteFrequency csf = new CountSiteFrequency();
		csf.parseInputFile(inputFile);
		csf.writeOutput(outputFile);
		
		Header.printFooter();
	}
	
	
	private void writeOutput(String outputFile) {
		BufferedWriter bw = IOUtils.getBufferedWriter(outputFile);
		try{
			bw.write("numberOfSites,Site,Frequency,Percentage");
			bw.newLine();
			
			for(String s : map.keySet()){
				final Map<String, Integer> thisMap = map.get(s);
				
				Comparator<String> myComparator = new Comparator<String>() {
					@Override
					public int compare(String s1, String s2) {
						if(thisMap.get(s1) == thisMap.get(s2)){
							return s1.compareTo(s2);
						}else if(thisMap.get(s1) > thisMap.get(s2)){
							return -1;
						} else {
							return 1;
						}
					}
				};
				Map<String, Integer> sortedMap = new TreeMap<String, Integer>(myComparator);
				sortedMap.putAll(thisMap);				

				for(String ss : sortedMap.keySet()){
					
					/*FIXME Remove after debugging. */
					int value = sortedMap.get(ss);
					if(value > 200){
						LOG.error("Cannot have more than 100%");
					}
					
					LOG.info(String.format("%s -> %s (%d) -> %.2f%%", s, ss, sortedMap.get(ss), (double)sortedMap.get(ss)/200*100));
					bw.write(String.format("%s,%s,%d,%.2f", s, ss, sortedMap.get(ss), (double)sortedMap.get(ss)/200*100));
					bw.newLine();
				}
			}
			
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("Cannot write to " + outputFile);
		} finally{
			try {
				bw.close();
			} catch (IOException e) {
				e.printStackTrace();
				throw new RuntimeException("Cannot close " + outputFile);
			}
		}
	}


	private void parseInputFile(String inputFile) {
		BufferedReader br = IOUtils.getBufferedReader(inputFile);
		try{
			String line = br.readLine();
			while((line = br.readLine()) != null){
				String[] sa = line.split(",");
				if(sa.length == 5){
					/* Check the number of sites of the solution. */
					String sites = String.format("%02d", Integer.parseInt(sa[0]));
					if(!map.containsKey(sites)){
						map.put(sites, new TreeMap<String, Integer>());
					}
					Map<String, Integer> thisMap = map.get(sites);
					
					/* Check the incumbent */
					String[] incumbent = sa[4].split(";");
					for(String site : incumbent){
						if(!thisMap.containsKey(site)){
							thisMap.put(site, 1);
						} else{
							thisMap.put(site, thisMap.get(site) + 1);
						}
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("Cannot read from " + inputFile);
		} finally{
			try {
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
				throw new RuntimeException("Cannot close " + inputFile);
			}
		}
	}


	public CountSiteFrequency() {
		this.map = new TreeMap<String, Map<String,Integer>>();
	}
	
	

}
