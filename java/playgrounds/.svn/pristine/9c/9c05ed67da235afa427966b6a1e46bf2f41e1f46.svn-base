//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.08.04 at 02:05:46 PM CEST 
//


package playground.gregor.grips.jaxb.inspire.basetypes;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for VerticalPositionValueType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="VerticalPositionValueType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="onGroundSurface"/>
 *     &lt;enumeration value="suspendedOrElevated"/>
 *     &lt;enumeration value="underground"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "VerticalPositionValueType")
@XmlEnum
public enum VerticalPositionValueType {


    /**
     * -- Definition --
     * 						The spatial object is on ground level.
     * 					
     * 
     */
    @XmlEnumValue("onGroundSurface")
    ON_GROUND_SURFACE("onGroundSurface"),

    /**
     * -- Definition --
     * 						The spatial object is suspended or elevated.
     * 					
     * 
     */
    @XmlEnumValue("suspendedOrElevated")
    SUSPENDED_OR_ELEVATED("suspendedOrElevated"),

    /**
     * -- Definition --
     * 						The spatial object is underground.
     * 					
     * 
     */
    @XmlEnumValue("underground")
    UNDERGROUND("underground");
    private final String value;

    VerticalPositionValueType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static VerticalPositionValueType fromValue(String v) {
        for (VerticalPositionValueType c: VerticalPositionValueType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
