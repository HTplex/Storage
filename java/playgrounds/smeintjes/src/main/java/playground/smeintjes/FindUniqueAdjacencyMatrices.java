package playground.smeintjes;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.matsim.core.utils.collections.Tuple;
import org.matsim.core.utils.io.IOUtils;

import playground.southafrica.utilities.Header;

/** 
 * This class reads in the output generated by the gtrieScanner
 * and finds all unique adjacency matrices. It is necessary to identify
 * these adjacency matrices so that it can be used as input when running
 * ISMAGS on a network. 
 * @author sumarie
 *
 */
public class FindUniqueAdjacencyMatrices {
	
	private static Logger log = Logger.getLogger(FindUniqueAdjacencyMatrices.class.toString());
	
	/**
	 * @param String the motif file from gtrieScanner (contains a list of adjacency
	 * matrices and the nodes contained in it)
	 * @param String the file where output adjacency matrices should be written
	 */
	public static void main(String[] args) {

		Header.printHeader(FindUniqueAdjacencyMatrices.class.toString(), args);
		String input = args[0];
		String output = args[1];
		
		HashMap<Integer, String> map = findUniqueMatrices(input);
		writeMap(map, output);
		Header.printFooter();
	}

	private static void writeMap(HashMap<Integer, String> map, String output) {
		
		log.info("Writing " + output + " to file.");
		try {
			BufferedWriter bw = new BufferedWriter(
					new FileWriter(new File(output)));
			try {
				for (String matrix : map.values()) {
					bw.write(matrix);
					bw.newLine();
				}
			} finally {
				bw.close();
				
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static HashMap<Integer, String> findUniqueMatrices(String input) {
		
		
		log.info("Reading adjacency list from " + input);
		HashMap<Integer, String> map = new HashMap<Integer, String>();
		try {
			BufferedReader br = IOUtils.getBufferedReader(input);
			String lines;
			while ((lines = br.readLine()) != null) {
				String[] line = lines.split(":");
				String adjacencyMatrix = line[0];
				if(map.containsValue(adjacencyMatrix)){
					continue;
				} else{
					int mapSize = map.size();
					map.put(mapSize+1, adjacencyMatrix);
				}
				
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	

}
