/* *********************************************************************** *
 * project: org.matsim.*
 * StrategyManagerWithRouteComparison.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2011 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

/**
 * 
 */
package playground.yu.replanning;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.matsim.api.core.v01.Id;
import org.matsim.api.core.v01.TransportMode;
import org.matsim.api.core.v01.network.Network;
import org.matsim.api.core.v01.population.Leg;
import org.matsim.api.core.v01.population.Person;
import org.matsim.api.core.v01.population.Plan;
import org.matsim.api.core.v01.population.PlanElement;
import org.matsim.api.core.v01.population.Population;
import org.matsim.core.population.routes.NetworkRoute;
import org.matsim.core.replanning.PlanStrategy;
import org.matsim.core.replanning.StrategyManager;

import playground.yu.choiceSetGeneration.PathSizeFrom2Routes;
import playground.yu.utils.io.DistributionCreator;
import playground.yu.utils.math.SimpleStatistics;

/**
 * @author yu
 * 
 */
@Deprecated // please use material from contrib.cadytsintegration instead. kai, nov'13
public class StrategyManagerWithRouteComparison extends StrategyManager {
	private Map<Id/* person */, Plan/* oldSelected */> oldSelectedPlans;
	private List<Double> pathSizes;
	private String outputFilenameBase;

	public StrategyManagerWithRouteComparison(Network network,
			String outputFilenameBase) {
		super();
		PathSizeFrom2Routes.setNetwork(network);
		oldSelectedPlans = new HashMap<Id, Plan>();
		pathSizes = new ArrayList<Double>();
		this.outputFilenameBase = outputFilenameBase;
		throw new RuntimeException("this will not work any more since beforeStrategyRunHook is no longer.  kai, nov'13") ;
	}

	/**
	 * compares the new Plans generated by "ReRouteSelected" with the old Plans
	 */
	@Override
	protected void afterRunHook(Population population) {
		// super.afterRunHook(population);/*empty*/
		for (Id personId : oldSelectedPlans.keySet()) {
			Plan oldSelectedPlan = oldSelectedPlans.get(personId), newlySelectedPlan = population
					.getPersons().get(personId).getSelectedPlan();
			List<PlanElement> oldPlanElements = oldSelectedPlan
					.getPlanElements(), newlySelelctedPlanElements = newlySelectedPlan
					.getPlanElements();
			for (int i = 0; i < oldPlanElements.size(); i++) {
				PlanElement planElement = oldPlanElements.get(i);
				if (planElement instanceof Leg) {
					Leg oldLeg = (Leg) planElement;

					if (oldLeg.getMode().equals(TransportMode.car)) {
						if (newlySelelctedPlanElements.get(i) instanceof Leg) {
							Leg newLeg = (Leg) newlySelelctedPlanElements
									.get(i);
							if (newLeg.getMode().equals(TransportMode.car)) {
								NetworkRoute oldRoute = (NetworkRoute) oldLeg
										.getRoute(), newRoute = (NetworkRoute) newLeg
										.getRoute();
								double pathSize = new PathSizeFrom2Routes(
										newRoute, oldRoute).getPathSize();
								pathSizes.add(pathSize);
							} else {
								throw new RuntimeException(
										"Leg with PlanElement index " + i
												+ " should be a \"car\" Leg [["
												+ newLeg + "]]");
							}

						} else {
							throw new RuntimeException("PlanElement " + i
									+ " of Person " + personId
									+ " should be a Leg [["
									+ newlySelelctedPlanElements.get(i) + "]]");

						}

					}

				}
			}
		}
		DistributionCreator distributionCreator = new DistributionCreator(
				pathSizes, 0.005);
		distributionCreator.createChartPercent(outputFilenameBase + "png",
				"Distribution of path-sizes", "path-size [0.5, 1.0]",
				"frequency of path-size");
		distributionCreator.writePercent(outputFilenameBase + "log");

		System.out.println("avg. pathSizes\t"
				+ SimpleStatistics.average(pathSizes));
	}

//	/**
//	 * notices the old selected plans that contains at least one "car" leg
//	 */
//	@Override
//	protected void beforeStrategyRunHook(Person person, PlanStrategy strategy) {
//		// super.beforeStrategyRunHook(person, strategy);/*empty*/
//		Plan oldSelected = person.getSelectedPlan();
//		for (PlanElement planElement : oldSelected.getPlanElements()) {
//			if (planElement instanceof Leg) {
//				Leg leg = (Leg) planElement;
//				if (leg.getMode().equals(TransportMode.car)) {
//					oldSelectedPlans.put(person.getId(), oldSelected);
//					return;
//				}
//			}
//		}
//	}

}
